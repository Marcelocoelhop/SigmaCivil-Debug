<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
	<meta charset="UTF-8" />
	<!-- <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> -->
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="css/jquery.mobile-1.0.1.min.css" />
	<script type="text/javascript" src="cordova.js"></script>
	<script type="text/javascript" src="js/mc.js" />
	</script>

	<script src="js/jquery.js"></script>
	<script src="js/jquery.mobile-1.4.5.min.js"></script>
</head>

<body>

	<script type="text/javascript">

		window.onerror = function (message, url, lineNumber) {
			alert(`Error: ${message} in ${url} at line ${lineNumber}`);
		}

		document.addEventListener("deviceready", onDeviceReady, false);

		function onDeviceReady() {
			iniciar();
		}

		/////////////////////////////
		function iniciar() {
			// Na linha abaixo, você deve incluir os prefixos do navegador que você vai testar.
			window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
			// Não use "var indexedDB = ..." se você não está numa function.
			// Posteriormente, você pode precisar de referências de algum objeto window.IDB*:
			window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
			window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;
			// (Mozilla nunca usou prefixo nesses objetos, então não precisamos window.mozIDB*)

			if (!window.indexedDB) {
				alert("Seu navegador não suporta uma versão estável do IndexedDB. Alguns recursos não estarão disponíveis.");
			}

			const dbName = "sigmaDB";

			var request = indexedDB.open(dbName, 1.0); // A versão será convertida para "1" inteiro.

			request.onerror = function(event) {
				alert("Você não habilitou minha web app para usar IndexedDB?!");
			};

			// Isso é o que os dados de nossos clientes será.
			const DadosClientes = [
				{ 
					ssn: "444-44-4444", 
					nome: "Bill", 
					idade: 35, 
					email: "bill@company.com" 
				},
				{ 
					ssn: "555-55-5555", 
					nome: "Donna", 
					idade: 32, 
					email: "donna@home.org" 
				},
			];

			request.onupgradeneeded = function(event) {
				var db = event.target.result;

				// Cria um objectStore para conter a informação sobre nossos clientes. Nós vamos
				// usar "ssn" como key path porque sabemos que é único;
				var objectStore = db.createObjectStore("clientes", { keyPath: "ssn" });

				// Cria um índice para buscar clientes pelo nome. Podemos ter nomes
				// duplicados, então não podemos usar como índice único.
				objectStore.createIndex("nome", "nome", { unique: false });

				// Cria um índice para buscar clientes por email. Queremos ter certeza
				// que não teremos 2 clientes com o mesmo e-mail;
				objectStore.createIndex("email", "email", { unique: true });

				// Usando transação oncomplete para afirmar que a criação do objectStore 
				// é terminada antes de adicionar algum dado nele.
				objectStore.transaction.oncomplete = function(event) {
					// Armazenando valores no novo objectStore.
					var clientesObjectStore = db.transaction("clientes", "readwrite").objectStore("clientes");
					for (var i in DadosClientes) {
						clientesObjectStore.add(DadosClientes[i]);
					}
					alert('Tabela criada!');
				}

				objectStore.transaction.onerror = function() {
					alert('Ocorreu um erro na criação!');
				}

				//var transaction2 = db.transaction(["clientes"]);
				//var objectStore2 = transaction2.objectStore("clientes");
				var request2 = objectStore.get("444-44-4444");
				request2.onerror = function(event) {
					alert('Ocorreu um erro na consulta!');
				};
				request2.onsuccess = function(event) {
					// Fazer algo com request.result!
					alert("O nome do SSN 444-44-4444 é " + request2.result.name);
				};


			};

			

		}

	</script>

</body>

</html>